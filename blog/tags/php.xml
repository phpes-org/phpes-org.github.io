<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[PHP-ES]]></title>
    <link href="/blog/tags/php.xml" rel="self"/>
    <link href="/"/>
    <updated>2016-04-18T10:32:41-03:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Aplicação Symfony como HTTP Server]]></title>
            <link href="/blog/2016/04/18/aplicacao-symfony-como-http-server"/>
            <updated>2016-04-18T00:00:00-03:00</updated>
            <id>/blog/2016/04/18/aplicacao-symfony-como-http-server</id>
            <content type="html"><![CDATA[<p>Tutorial ensinando transformar uma aplicação Symfony em um servidor HTTP pronto para executar, e sem necessidade servidor adicional como por exemplo NGINX e/ou Apache2, utilizando a biblioteca ReactPHP.</p>

<blockquote>
  <p>TL;DR: Run your application as a HTTP server to increase its performances.</p>
  
  <p>HTTP frameworks, such as Symfony, allow us to build applications that have the potential to achieve Super Speed.</p>
  
  <p>A first way to make use of it is to run our application as a HTTP server. In this article we'll take a Symfony application and demonstrate how to run it as HTTP server using ReactPHP.</p>
</blockquote>

<p>Fonte: <a href="https://gnugat.github.io/2016/04/13/super-speed-sf-react-php.html">https://gnugat.github.io/2016/04/13/super-speed-sf-react-php.html</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP must watch]]></title>
            <link href="/blog/2016/04/14/php-must-watch"/>
            <updated>2016-04-14T00:00:00-03:00</updated>
            <id>/blog/2016/04/14/php-must-watch</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/phptodayorg/php-must-watch">PHP must watch</a> é um repositório contendo uma lista de conferências sobre PHP:</p>

<blockquote>
  <p>A list of interesting conference talks and great videos on PHP. Inspired by js-must-watch</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Conferência PHP em Porto Alegre]]></title>
            <link href="/blog/2016/04/13/conferencia-php-em-porto-alegre"/>
            <updated>2016-04-13T00:00:00-03:00</updated>
            <id>/blog/2016/04/13/conferencia-php-em-porto-alegre</id>
            <content type="html"><![CDATA[<blockquote>
  <p>Está chegando o grande dia da Conferência PHP do Rio Grande do Sul, organizada pelo PHPRS.</p>
  
  <p>Haverá diversas palestras sobre PHP, segurança, carreira e muito mais, além daquele networking de sempre, para fazer novos contatos, encontrar novas oportunidades e aprender mais.</p>
  
  <p>O evento ocorre no dia 7 de Maio de 2016 em Porto Alegre – RS, na Faculdade SENAC. Os ingressos já estão a venda pelo site http://conf.phprs.com.br/. Se você quiser a camiseta, é bom correr pois já estão esgotando.</p>
</blockquote>

<p>Site do evento: <a href="http://conf.phprs.com.br/">http://conf.phprs.com.br/</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Imagine]]></title>
            <link href="/blog/2016/04/11/imagine"/>
            <updated>2016-04-11T00:00:00-03:00</updated>
            <id>/blog/2016/04/11/imagine</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/avalanche123/Imagine">Imagine</a> é uma biblioteca OOP de manipulação de imagem com implementações para as extensões GD2, Imagick e Gmagick. Com a Imagine é possível redimensionar, criar thumbnail, adicionar marca d'água, efeitos, etc.</p>

<p>Exemplo:</p>

<pre><code>&lt;?php

$imagine = new Imagine\Gd\Imagine();
// or
$imagine = new Imagine\Imagick\Imagine();
// or
$imagine = new Imagine\Gmagick\Imagine();

$size    = new Imagine\Image\Box(40, 40);

$mode    = Imagine\Image\ImageInterface::THUMBNAIL_INSET;
// or
$mode    = Imagine\Image\ImageInterface::THUMBNAIL_OUTBOUND;

$imagine-&gt;open('/path/to/large_image.jpg')
    -&gt;thumbnail($size, $mode)
    -&gt;save('/path/to/thumbnail.png')
</code></pre>

<p>Documentação: <a href="http://imagine.readthedocs.org/en/latest/">http://imagine.readthedocs.org/en/latest/</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP-FFMpeg]]></title>
            <link href="/blog/2016/04/08/php-ffmpeg"/>
            <updated>2016-04-08T00:00:00-03:00</updated>
            <id>/blog/2016/04/08/php-ffmpeg</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/PHP-FFMpeg/PHP-FFMpeg">PHP-FFMpeg</a> é um projeto que representa de forma orientada a objetos (OOP) a biblioteca ffmpeg/avconv, facilitando a manipulação de arquivos de áudio e vídeo.</p>

<blockquote>
  <p>This library requires a working FFMpeg install. You will need both FFMpeg and FFProbe binaries to use it. Be sure that these binaries can be located with system PATH to get the benefit of the binary detection, otherwise you should have to explicitely give the binaries path on load.</p>
</blockquote>

<p>Exemplo:</p>

<pre><code>$ffmpeg = FFMpeg\FFMpeg::create();
$video = $ffmpeg-&gt;open('video.mpg');
$video
    -&gt;filters()
    -&gt;resize(new FFMpeg\Coordinate\Dimension(320, 240))
    -&gt;synchronize();
$video
    -&gt;frame(FFMpeg\Coordinate\TimeCode::fromSeconds(10))
    -&gt;save('frame.jpg');
$video
    -&gt;save(new FFMpeg\Format\Video\X264(), 'export-x264.mp4')
    -&gt;save(new FFMpeg\Format\Video\WMV(), 'export-wmv.wmv')
    -&gt;save(new FFMpeg\Format\Video\WebM(), 'export-webm.webm');
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP GUI]]></title>
            <link href="/blog/2016/04/07/php-gui"/>
            <updated>2016-04-07T00:00:00-03:00</updated>
            <id>/blog/2016/04/07/php-gui</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/gabrielrcouto/php-gui">PHP-GUI</a> é um projeto experimental que permite criar programas com interface gráfica nativa do desktop do usuário sem a necessidade de extensões adicionais.</p>

<blockquote>
  <p>PHP can be more than a "Web Language", it's a fast language, with a cross platform interpreter and a good CLI. GUI is a natural step for completing this ecosystem.</p>
  
  <p>For many years, GUI projects are being developed for PHP, like PHP-GTK, PHP-QT, wxPHP and so many others, but none of them became popular.</p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Terminal GameBoy Emulator]]></title>
            <link href="/blog/2016/04/06/php-terminal-gameboy-emulator"/>
            <updated>2016-04-06T00:00:00-03:00</updated>
            <id>/blog/2016/04/06/php-terminal-gameboy-emulator</id>
            <content type="html"><![CDATA[<p>Para responder a pergunta do que dá para fazer utilizando PHP, surge o projeto de um emulador de GameBoy via terminal.</p>

<blockquote>
  <p>Some people will ask me: "Why you did that?"</p>
  
  <p>Well, a friend asked me "What PHP can do?". I thought about that awhile and the idea came up. With PHP7's performance improvement now it's possible to emulate some systems :smile: and, come on, that's funny! :dancers:</p>
  
  <p>It's based on the GameBoy JS Emulator.</p>
</blockquote>

<p>Fonte: <a href="https://github.com/gabrielrcouto/php-terminal-gameboy-emulator/">https://github.com/gabrielrcouto/php-terminal-gameboy-emulator/</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Natika Forum system]]></title>
            <link href="/blog/2016/04/05/natika-forum-system"/>
            <updated>2016-04-05T00:00:00-03:00</updated>
            <id>/blog/2016/04/05/natika-forum-system</id>
            <content type="html"><![CDATA[<p>Sistema simples de fórum escrito em PHP voltado para desenvolvedores e integrado com autenticação via redes sociais (Social Login).</p>

<blockquote>
  <p>Simple PHP Forum system for developers.</p>
</blockquote>

<p>Fonte: <a href="http://natika.windwalker.io/">http://natika.windwalker.io/</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Live Regex]]></title>
            <link href="/blog/2016/04/04/php-live-regex"/>
            <updated>2016-04-04T00:00:00-03:00</updated>
            <id>/blog/2016/04/04/php-live-regex</id>
            <content type="html"><![CDATA[<p>Ferramenta online para criar e testar expressões regulares em PHP.</p>

<blockquote>
  <p>PHP Live Regex - A Live Regular Expression Tester for PHP</p>
</blockquote>

<p>Fonte: <a href="http://www.phpliveregex.com/">http://www.phpliveregex.com/</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[3v4l]]></title>
            <link href="/blog/2016/03/31/3v4l"/>
            <updated>2016-03-31T00:00:00-03:00</updated>
            <id>/blog/2016/03/31/3v4l</id>
            <content type="html"><![CDATA[<p>Execute o seu código em mais de 150 versões de de PHP e HHVM.</p>

<blockquote>
  <p>3v4l.org is an online shell that allows you to run your code on my server. I compiled more than 150 different PHP versions (every version released since 4.3.0) plus HHVM for you to use.</p>
</blockquote>

<p><a href="https://3v4l.org/">https://3v4l.org/</a></p>
]]></content>
        </entry>
    </feed>